---
title: "PCM stats"
author: "Nelly Maina"
format: html
editor: visual
---

```{r}
library(readxl)
library(tidyverse)
library(glamr)
library(glitr)
library(systemfonts)
library(scales)
library(tidytext)
library(glue)
library(janitor)
library(ggtext)
library(patchwork)
library(knitr)
library(readr)
library(openxlsx)
library(stringr)
library(infer)
library(lme4)
library(broom)
library(nnet)
library(kableExtra)
library(reshape)


```

# Read data 

reads in two datasets (ml_dfclean and vl_df) from .rds files and selects relevant columns from ml_dfclean to create a new dadata framef_stats. It then selects the vl_status, missing_V3, and merge_id columns from vl_df. The merged_df data frame is created by merging df_stats with the selected columns from vl_df using the merge_id column. Finally, the df_stat_clean data frame is generated by filtering out rows where both vl_status and missing_V3 are missing and keeping only the rows where missing_V3 is FALSE. The structure of df_stat_clean is printed to verify the changes.

```{r}
ml_path <- "Dataout/masterclientlist.rds"
ml_dfclean <- readr::read_rds(ml_path)

vl_path <- "Dataout/vl_df_cleaned_stats.rds"
vl_df <- read_rds(vl_path)

df_stats <- ml_dfclean %>%
  select(
    interview_date,
    merge_id,
    assessment_type,
    age,
    sex,
    recommend_services,
    healthy_symptom_free_frequency,
    problem_experience_last_2_weeks,
    support_from_family_friends,
    hiv_discrimination_past_month,
    hiv_treatment_expenses_loan_sold,
    preferred_hiv_services_method,
    preferred_dsd_choice,
    attach_to_chw,
    intervention,
    parenthood_status_combined
  )

str(df_stats)

vl_selected <- vl_df %>%
  select(vl_status, missing_V3, merge_id)

merged_df <- left_join(df_stats, vl_selected, by = "merge_id")
# 
# df_stat_clean <- merged_df %>%
#   filter(!(is.na(vl_status) & is.na(missing_V3)))
#   filter(missing_V3 == FALSE)
# 
# str(df_stat_clean)
```
# Merge Viral load  data into the  assessment data using a left join

```{r}
# Extract vl_status, missing_v3, and merge_id from vl_df_cleanfinal2_filtered
vl_selected <- vl_df %>% 
  select(vl_status, missing_V3, merge_id,vlsup_cat_V1,vlsup_cat_V2, vlsup_cat_V3)



# reshape vl_selected 

# Reshape vl_selected from wide to long format
vl_selected_long <- vl_selected %>%
  pivot_longer(
    cols = starts_with("vlsup_cat_V"),
    names_to = "vl_assessment",
    values_to = "viral load"
  ) %>%
  mutate(
    vl_assessment = recode(vl_assessment,
                           `vlsup_cat_V1` = "Baseline",
                           `vlsup_cat_V2` = "Follow up 1",
                           `vlsup_cat_V3` = "Follow up 2")
  ) %>%
  arrange(merge_id, vl_assessment)

#Sort ml_dfclean by merge_id and assessment_type

df_stats_sorted <- df_stats %>%
  arrange(merge_id, assessment_type)

#Merge the sorted dataframes on merge_id and ensure the order is correct:
  
# Merge the sorted dataframes
merged_df <- df_stats_sorted %>%
  left_join(vl_selected_long, by = c("merge_id", "assessment_type" = "vl_assessment"))

# Print the structure and head of the merged data frame
str(Merged_df)
head(Merged_df)

```
# filter all observations that had less than 3  viral loads
```{r}
# Filter observations where missing_V3 is TRUE
df_stat_clean <- Merged_df %>%
  filter(missing_V3 == FALSE)
```



# Demographic characteristics table

```{r}

library(gtsummary)
library(gt)

# Assuming your data frame is named merged_df
summary_table <- df_stat_clean %>%
  select(-merge_id, -intervention, -vl_status, -missing_V3, -interview_date) %>%
  tbl_summary(
    by = assessment_type,
    statistic = all_categorical() ~ "{n} ({p}%)",
    missing = "no",  # Ensures all levels are shown
    label = list(
      age ~ "Age (years)",
      sex ~ "Sex",
      recommend_services ~ "Recommend Services",
      healthy_symptom_free_frequency ~ "Healthy Symptom-Free Frequency",
      problem_experience_last_2_weeks ~ "Problem Experience Last 2 Weeks",
      support_from_family_friends ~ "Support from Family/Friends",
      hiv_discrimination_past_month ~ "HIV Discrimination Past Month",
      hiv_treatment_expenses_loan_sold ~ "HIV Treatment Expenses Loan Sold",
      preferred_hiv_services_method ~ "Preferred HIV Services Method",
      preferred_dsd_choice ~ "Preferred DSD Choice",
      attach_to_chw ~ "Attach to CHW"
    )
  ) %>%
  modify_header(label ~ "**Characteristics**") %>%
  as_gt() %>%
  tab_header(
    title = md("**Demographic Characteristics**")
  ) %>%
  tab_options(
    table.width = pct(100),
    column_labels.font.weight = "bold"
  ) %>%
  tab_style(
    style = cell_text(size = px(12)),  # Adjust font size if needed
    locations = cells_body()
  )
# Display the summary table
summary_table

```

We will perform Chi-Square tests to compare the distribution of categorical variables across different assessment points.
```{r}
# Define the interpretation function
interpret_significance <- function(p_value) {
  if (is.na(p_value)) {
    return("NA")
  } else if (p_value < 0.001) {
    return("Highly significant")
  } else if (p_value < 0.01) {
    return("Significant")
  } else if (p_value < 0.05) {
    return("Moderately significant")
  } else {
    return("Not significant")
  }
}

# Conduct Chi-Square Tests
cols <- c("sex", "age", "recommend_services", "healthy_symptom_free_frequency", "problem_experience_last_2_weeks", 
          "support_from_family_friends", "hiv_discrimination_past_month", 
          "hiv_treatment_expenses_loan_sold", "preferred_hiv_services_method", 
          "preferred_dsd_choice", "attach_to_chw", "parenthood_status_combined")

chisq_test <- function(data, formula) {
  test <- chisq.test(table(data[[all.vars(formula)[1]]], data[[all.vars(formula)[2]]]))
  data.frame(
    statistic = test$statistic,
    p_value = test$p.value,
    chisq_df = test$parameter,
    stringsAsFactors = FALSE
  )
}

# Conduct Chi-Square tests by assessment type
chisq_results <- purrr::set_names(cols, cols) %>%
  purrr::map(~as.formula(paste("assessment_type", ., sep = "~"))) %>%
  purrr::map_dfr(~chisq_test(df_stat_clean, formula = .), .id = "metric")

# Add interpretation column to the results
chisq_results <- chisq_results %>%
  mutate(Significance = sapply(p_value, interpret_significance))

# Print the results
print(chisq_results)

```
#The results indicate that certain metrics (e.g., support from family/friends, HIV discrimination, and attachment to CHWs) show significant changes across different assessment points, suggesting that

interventions may have impacted these aspects significantly over time. On the other hand, metrics like sex, age, and parenthood status combined did not show significant changes, indicating stability in these demographics across different assessment points. The metric for preferred DSD choice could not be evaluated due to insufficient data or lack of variability.


```{r}
# Define the interpretation function
interpret_significance <- function(p.value) {
  if (is.na(p.value)) {
    return("NA")
  } else if (p.value < 0.001) {
    return("Highly significant")
  } else if (p.value < 0.01) {
    return("Significant")
  } else if (p.value < 0.05) {
    return("Moderately significant")
  } else {
    return("Not significant")
  }
}

# Conduct Chi-Square Tests
cols <- c("sex", "age", "recommend_services", "healthy_symptom_free_frequency", "problem_experience_last_2_weeks", 
          "support_from_family_friends", "hiv_discrimination_past_month", 
          "hiv_treatment_expenses_loan_sold", "preferred_hiv_services_method", 
          "preferred_dsd_choice", "attach_to_chw", "parenthood_status_combined")

# analysis done by the viral load status( at each time period ) 
chisq_results_viralload <- purrr::set_names(cols, cols) %>%# analysis done by the final viral load category 
  purrr::map(~as.formula(paste("`viral load`", ., sep = "~"))) %>%
  purrr::map_dfr(~chisq_test(df_stat_clean, formula = .), .id = "metric")
# Add interpretation column to the results
chisq_results_viralload <- chisq_results_viralload %>%
  mutate(Significance = sapply(p_value, interpret_significance))
# Print the results
print(chisq_results_viralload)
# # analysis done by the final viral load category 
# chisq_results <- purrr::set_names(cols, cols) %>%# analysis done by the final viral load category 
#   purrr::map(~as.formula(paste("vl_status", ., sep = "~"))) %>%
#   purrr::map_dfr(~chisq_test(df_stat_clean, formula = .), .id = "metric")
# 
# # Add interpretation column to the results
# chisq_results <- chisq_results %>%
#   mutate(Significance = sapply(p_value, interpret_significance))

# Print the results
#print(chisq_results)

```
We conducted Chi-Square tests to assess the association between various metrics and the viral load status at the start, mid, point and at the end. The analysis revealed that the association between the characteristic "attach to CHW" and viral load status was highly significant (χ² = 25.34, p < 0.001). However, no significant associations were found for sex, age, recommend services, healthy symptom-free frequency, problem experience last 2 weeks, support from family/friends, HIV discrimination past month, HIV treatment expenses loan sold, preferred HIV services method, preferred DSD choice, and parenthood status combined. These findings suggest that while most demographic and behavioral factors did not show significant associations with viral load status, the involvement with community health workers (CHWs) plays a critical role in achieving viral suppression.


# 4. Fit Multinomial Logistic Regression Model

fits a multinomial logistic regression model to the df_stat_clean dataframe. The assessment_type column is converted to a factor with specified levels. The model predicts vl_status based on several predictor variables (recommend_services, healthy_symptom_free_frequency, support_from_family_friends, hiv_discrimination_past_month, hiv_treatment_expenses_loan_sold, and attach_to_chw). The summary function displays the model summary, including coefficients and statistics. The odds_ratios are calculated by exponentiating the model coefficients. The tidy function is used to create a tidy dataframe of the model results, including confidence intervals and significance interpretation
```{r}
df_stat_clean$assessment_type <- factor(df_stat_clean$assessment_type, levels = c("Baseline", "Follow up 1", "Follow up 2"))

model <- multinom(vl_status ~ recommend_services + healthy_symptom_free_frequency + support_from_family_friends + 
                  hiv_discrimination_past_month + hiv_treatment_expenses_loan_sold + attach_to_chw, 
                  data = df_stat_clean)

summary(model)

odds_ratios <- exp(coef(model))
print(odds_ratios)

tidied_model <- tidy(model, exponentiate = TRUE, conf.int = TRUE) %>%
  dplyr::rename(
    Term = term,
    OddsRatio = estimate,
    CI_Lower = conf.low,
    CI_Upper = conf.high
  )

tidied_model <- tidied_model %>%
  mutate(interpretation = sapply(p.value, interpret_significance))

print(tidied_model)


```
#5. Plot Results
creates a plot of the odds ratios and their 95% confidence intervals from the multinomial logistic regression model. The ggplot2 library is used for plotting. The Term column is plotted on the x-axis, and the OddsRatio on the y-axis. The points represent the odds ratios, and error bars represent the 95% confidence intervals. The plot is flipped for better readability using coord_flip(). The theme_minimal() function is used for a clean plot theme, and labels are added using labs()

```{r}
ggplot(tidied_model, aes(x = Term, y = OddsRatio, color = y.level)) +
  geom_point() +
  geom_errorbar(aes(ymin = CI_Lower, ymax = CI_Upper), width = 0.2) +
  coord_flip() +
  theme_minimal() +
  labs(title = "Odds Ratios and 95% CI for Multinomial Logistic Regression",
       x = "Metrics",
       y = "Odds Ratio",
       color = "Outcome Level") +
  scale_y_continuous(trans = 'log10')  # Use logarithmic scale for y-axis

```
```{r}
term_labels <- c(
  "support_from_family_friendsSome" = "Support from Family/Friends: Some",
  "support_from_family_friendsQuite a lot" = "Support from Family/Friends: Quite a lot",
  "support_from_family_friendsNot at all" = "Support from Family/Friends: Not at all",
  "recommend_servicesSomewhat" = "Recommend Services: Somewhat",
  "recommend_servicesQuite a lot" = "Recommend Services: Quite a lot",
  "recommend_servicesNot at all" = "Recommend Services: Not at all",
  "hiv_treatment_expenses_loan_soldYes" = "HIV Treatment Expenses Loan Sold: Yes",
  "hiv_discrimination_past_monthSomewhat" = "HIV Discrimination Past Month: Somewhat",
  "hiv_discrimination_past_monthQuite a lot" = "HIV Discrimination Past Month: Quite a lot",
  "hiv_discrimination_past_monthNone at all" = "HIV Discrimination Past Month: None at all",
  "healthy_symptom_free_frequencySometimes" = "Healthy Symptom Free Frequency: Sometimes",
  "healthy_symptom_free_frequencyQuite a lot" = "Healthy Symptom Free Frequency: Quite a lot",
  "healthy_symptom_free_frequencyNever" = "Healthy Symptom Free Frequency: Never",
  "attach_to_chwYes" = "Attach to CHW: Yes",
  "attach_to_chwNot sure" = "Attach to CHW: Not sure",
  "attach_to_chwNo" = "Attach to CHW: No",
  "(Intercept)" = "Intercept"
)

# Apply the labels to the plot
ggplot(tidied_model, aes(x = Term, y = OddsRatio, color = y.level)) +
  geom_point() +
  geom_errorbar(aes(ymin = CI_Lower, ymax = CI_Upper), width = 0.2) +
  coord_flip() +
  theme_minimal() +
  scale_x_discrete(labels = term_labels) +  # Apply the readable labels
  labs(title = "Odds Ratios and 95% CI for Multinomial Logistic Regression",
       x = "Metrics",
       y = "Odds Ratio",
       color = "Outcome Level") +
  scale_y_continuous(trans = 'log10')  # Use logarithmic scale for y-axis

```
# The results revealed that most predictors did not exhibit a statistically significant effect on VL suppression status. However, a notable finding was that individuals who did not recommend HIV services ("Recommend Services: Not at all") were significantly less likely to achieve viral load suppression (OR significantly different from 1). This suggests a potential area for intervention, highlighting the importance of improving patient experiences and perceptions of HIV services to enhance treatment outcomes. 




# Transition probabilities are used to analyze the likelihood of moving from one state to another over time. This is particularly useful in longitudinal studies where you have repeated measures for the same individuals
```{r}

# Filter out merge_id in vl_df that are not in ml_dfclean
filtered_vl_df <- vl_df %>%
  semi_join(ml_dfclean, by = "merge_id") %>%
  filter(missing_V3 == FALSE)

# Check the structure of the filtered data frame to ensure the filter worked correctly
str(filtered_vl_df)

# Create a long format dataframe for transitions
long_vl_df <- filtered_vl_df %>%
  select(merge_id, vlsup_cat_V1, vlsup_cat_V2, vlsup_cat_V3) %>%
  pivot_longer(cols = starts_with("vlsup_cat"), names_to = "time_point", values_to = "vl_status")

# Create lagged variable for the previous state
long_vl_df <- long_vl_df %>%
  group_by(merge_id) %>%
  mutate(previous_vl_status = lag(vl_status)) %>%
  filter(!is.na(previous_vl_status)) %>%
  ungroup()

```
2. Create Transition Matrix
Calculate the frequency of transitions from one state to another.

```{r}
# Create transition matrix
transition_matrix <- table(long_vl_df$previous_vl_status, long_vl_df$vl_status)

# View the transition matrix
print(transition_matrix)

# Convert the transition matrix to a probability matrix
transition_probabilities <- prop.table(transition_matrix, 1)

# View the transition probabilities
print(transition_probabilities)

# Plot the transition probabilities
# Convert transition probabilities matrix to a dataframe
df_transition_probs <- as.data.frame(as.table(transition_probabilities))
```
# generate plot 
```{r}
ggplot(df_transition_probs, aes(x = Var2, y = Var1, fill = Freq)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "white", high = "#1e87a5") +
  labs(title = "Probability of Transitioning Between Viral Load States Over Time",
        subtitle = "High Probability of Maintaining Viral Suppression Once Suppressed",
       x = "Next State",
       y = "Previous State",
       fill = "Probability of Transition") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_x_discrete(labels = c("suppressed", "unsuppressed", "cycling")) +
  scale_y_discrete(labels = c("suppressed", "unsuppressed", "cycling"))

```
Summary:
Stable Suppression: Individuals who are suppressed tend to remain suppressed in about 74% of cases.
Stable Unsuppression: Individuals who are unsuppressed tend to remain unsuppressed in about 54% of cases.
Transitions:
There is a notable proportion (26%) of individuals transitioning from suppressed to unsuppressed.
There is also a significant proportion (46%) of individuals transitioning from unsuppressed to suppressed.





